#!/bin/bash
# base script
set -euo pipefail

ARCH="$(uname -m)"
MANIFEST=0
TYPE=''

OPTIND=1


#
# Provide arch names for registory path
#
# used to create arch specific tag path
get_registry_arch() {
    local -r arch="${1}"
    case "${arch}" in
        i386|amd64|arm64v8|ppc64le|s390x)
            echo "${arch}";;
        x86_64)
            echo 'amd64';;
        aarch64|arm64|arm64/v8)
            echo 'arm64v8';;
        i386|i486|i586|i686|x86)
            echo 'i386';;
        *)
            echo "Error: unsupported architecture ${arch}" 1>&2
            exit 2
            ;;
    esac
}

#
# Provide platform arch for container param input
#
get_platform_arch() {
    local -r arch="${1}"
    case "${arch}" in
        386|amd64|arm64|arm64/v8|ppc64le|s390x)
            echo "${arch}";;
        x86_64)
            echo 'amd64';;
        aarch64)
            echo 'arm64/v8';;
        i386|i486|i586|i686|x86)
            echo '386';;
        *)
            echo "Error: unsupported architecture ${arch}" 1>&2
            exit 2
            ;;
    esac
}

#
# get build arch
#
# used to populate arch list for processing single or all
get_build_arch() {
    local -r arch="${2}"
    local -r version=${1}
    case "${arch}" in
        x86_64|aarch64|ppc64le|s390x)
            echo "${arch}";;    
        all)
            case "${version}" in
                8)
                    echo 'x86_64 aarch64 ppc64le';;
                9)
                    echo 'x86_64 aarch64 ppc64le s390x';;   
            esac 
            ;;
        *)
            echo "Error: unsupported architecture ${arch}" 1>&2
            exit 2
            ;;
    esac
}

#
# get build types
#
# used to populate arch list for processing single or all
get_build_types() {
    local -r type="${1}"
    case "${type}" in
        default|minimal|micro|base|init)
            echo "${type}";;    
        all)
            echo 'default minimal micro base init';;
        ubi)
            echo 'micro base init';;
        *)
            echo "Error: unsupported image type ${type}" 1>&2
            exit 2
            ;;
    esac
}


#
# Provide generalized machine arch
#
# used for output filenames based on $(uname -m)
get_machine_arch() {
    local -r arch="${1}"
    case "${arch}" in
        x86_64|aarch64|ppc64le|s390x)
            echo "${arch}";;    
        amd64)
            echo 'x86_64';;
        arm64/v8|arm64|arm64v8)
            echo 'aarch64';;
        386|i386|i486|i586|i686|x86)
            echo 'i686';;
        *)
            echo "Error: unsupported architecture ${arch}" 1>&2
            exit 2
            ;;
    esac
}

#
# Checks Almalinux versiona build arch is supported
#
#  check_build_support_arch Version Arch
#    ex: check_build_support_arch 8 aarch64
#
check_build_support_arch() {
    local -r version="${1}"
    local -r arch="${2}"
    case "${version}" in
        8)
            case "${arch}" in
                x86_64|aarch64|ppc64le|all)
                    echo "supported";;     
                *)
                    echo "Error: unsupported architecture ${arch} for version ${version}" 1>&2
                    exit 2
                    ;;
            esac
            ;;
        9)    
            case "${arch}" in
                x86_64|aarch64|ppc64le|s390x|all)
                    echo "supported";;    
                *)
                    echo "Error: unsupported architecture ${arch} for version ${version}" 1>&2
                    exit 2
                    ;;
            esac
            ;;
        *)
            echo "Error: unsupported version ${arch}" 1>&2
            exit 2   
            ;;
    esac         
}

#
# build one container image from repo files
#
# build_single_image_from_repos Version Arch Type buildTag
#
build_single_image_from_repos(){
    local -r al_version="${1}"
    local -r arch_platform=$(get_platform_arch "${2}")
    local -r type="${3}"
    local -r tag="${4}"
    local -r build_arg="--squash"
    docker build "$build_arg" "--platform=linux/$arch_platform" -t "${tag}" -f "dockerfiles/al${al_version}/Dockerfile.${type}" .
}

gen_rootfs() {
    local -r image="${1}"
    local -r tname="${2}"

    tcnt=$(docker inspect $image | jq '.[] | .RootFS.Layers | length')
    
    echo "Found $tcnt layer(s) in image '$image'."
    if [ $tcnt -ne 1 ]; then
        echo "Only single layer image is supported at this time. Use '--squash' option to create single layer image."
        exit
    fi
    echo "Setting up temp work dir ..."
    mkdir -p rootfs-tmp && cd rootfs-tmp
    echo "Saving docker/container image ..."
    docker save $image -o rootfstmp.tar
    trepo=$(tar -tf rootfstmp.tar | grep layer)
    tcnt=$(echo $trepo | tr ' ' '\n' | grep layer | wc -l | xargs)
    echo "Found $tcnt layer(s) in image '$image'."
    if [ $tcnt -eq 1 ]; then
        echo "Extracting rootfs $trepo ..."
        tar -xf rootfstmp.tar $trepo
        mv $trepo $tname.tar
        echo "Compressing rootfs ..."
        xz $tname.tar
        mv $tname* ../
        cd ..
        F1=$(ls | grep $tname)
        TMSG="Task complete. Output rootfs located at $PWD/$F1"
    else
        echo "Only single layer image is supported at this time. Use '--squash' option to create single layer image."
        cd ..
        TMSG="Error Exit, task complete."
    fi
    echo "Perform cleanup ..."
    rm -rf rootfs-tmp
    echo $TMSG
}

build_docker_file() {

    repo_prefix="${1:'quay.io/almalinuxautobot'}"
    repo_sep=':'
    tag_suffix="${2:$(date +%Y%m%d)}"
    # for type in micro minimal base init; 
    for type in micro; 
    do
        for arch in amd64 arm64/v8 ppc64le;

        do
            march=$arch;
            if [[ $arch == 'arm64/v8' ]]; then
                march='aarch64';
            fi    
            if [[ $arch == 'amd64' ]]; then
                march='x86_64';
            fi   
            build_tag=$repo_prefix$repo_sep'8-'$type'-20220608-'$march;
            docker build --squash --platform=linux/$arch -t $build_tag -f Dockerfile.$type . 
            docker push $build_tag
        done
    done
}

build_manifest() {
    repo_prefix="${1:srbala/}"
    types="micro minimal base init"
    tags="latest 8 8.6 8.6-20220512"
    dtag="20220512"
    ver='8'
for type in $types; 
do 
    if [ "${ver}" == '8' ]; then
        for tag in $tags
        do
            docker manifest create --amend $repo_prefix/$ver-$type:$tag \
                $repo_prefix/amd64:$ver-$type-$dtag \
                $repo_prefix/arm64v8:$ver-$type-$dtag \
                $repo_prefix/ppc64le:$ver-$type-$dtag;
            docker manifest push $repo_prefix/$ver-$type:$tag
        done
    fi    
    if [ "${ver}" == '9' ]; then
        for tag in $tags
        do
            docker manifest create --amend $repo_prefix/$ver-$type:$tag \
                $repo_prefix/amd64:$ver-$type-$dtag \
                $repo_prefix/arm64v8:$ver-$type-$dtag \
                $repo_prefix/ppc64le:$ver-$type-$dtag \
                $repo_prefix/s390x:$ver-$type-$dtag ;
            docker manifest push $repo_prefix/$ver-$type:$tag
        done
    fi    

done
}

build_image_from_repos () {
    # local -r version="${1}"
    # local -r types=$(get_registry_arch ${1})

    # 8 or 9
    local -r input_version=${1}
    # input arch env, 
    local -r input_arch=${2}
    # input type env
    local -r input_type=${3}
    local major_version=${input_version}
    local arch_list=$(get_build_arch ${input_version} ${input_arch})
    local type_list=$(get_build_types ${input_type})

    echo "Input version " ${input_version}
    echo "Input Arch " ${input_arch}
    echo "Input type " ${input_type}
    echo "Computed arch list: "${arch_list}
    echo "Computed type list: "${type_list}

    status=$(check_build_support_arch ${1} ${2})

    echo "Validating input values ... ${status}" 
    repo_prefix="srbala"
    repo_sep=":"
    tag_date=$(date +%Y%m%d)
    if [ $status == 'supported' ];  then
    echo "Ready for processing ..."
        for arch in ${arch_list};
        do
            for type in ${type_list};
            do
                #build_tag='almalinux/'$arch$repo_sep'8-'$type'-20220608';
                build_tag=$repo_prefix'/'$(get_registry_arch ${arch})$repo_sep${input_version}
                if [ "$type" == "default" ]; then
                    build_tag=$build_tag'-'$tag_date
                else   
                    build_tag=$build_tag'-'$type'-'$tag_date
                fi
                # build_single_image_from_repos 9 "${1}" minimal "t-minimal-$(get_registry_arch ${1})"
                echo "build_single_image_from_repos ${input_version} ${arch} $type $build_tag"
                build_single_image_from_repos ${input_version} ${arch} $type $build_tag
                file_prefix='almalinux-'${input_version}'-'$(get_machine_arch ${arch})'-'$type
                gen_rootfs $build_tag $file_prefix
                #docker push $build_tag

            done
        done
    else
    echo "Input value error"
    fi
}


build_image_from_repos ${1} ${2} ${3}